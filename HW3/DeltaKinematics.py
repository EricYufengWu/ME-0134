import math
import time

Re = 20.65       # end effector radius
Rb = 45.32       # base radius
Le = 248         # end arm
Lb = 126.75      # base arm
angle_min = 5    # 0 is when arm is parallel to base. down is positive 
angle_max = 90 

cos120 = -0.5    
sin120 = math.sqrt(3)/2.0  

# Inverse Kinematics Helper Function
def calculate_angle_yz(x0, y0, z0):
    Jy = []
    Jz = []
    sol = []
    Jy.append((Lb**2 - Le**2 - Rb**2 + Re**2 - 2*Re*y0 + x0**2 + y0**2 + z0**2)/(2*(Rb - Re + y0)) - (z0*(Lb**2*z0 - Le**2*z0 + Rb**2*z0 + Re**2*z0 + x0**2*z0 + y0**2*z0 + Rb*(- Lb**4 + 2*Lb**2*Le**2 + 2*Lb**2*Rb**2 - 4*Lb**2*Rb*Re + 4*Lb**2*Rb*y0 + 2*Lb**2*Re**2 - 4*Lb**2*Re*y0 - 2*Lb**2*x0**2 + 2*Lb**2*y0**2 + 2*Lb**2*z0**2 - Le**4 + 2*Le**2*Rb**2 - 4*Le**2*Rb*Re + 4*Le**2*Rb*y0 + 2*Le**2*Re**2 - 4*Le**2*Re*y0 + 2*Le**2*x0**2 + 2*Le**2*y0**2 + 2*Le**2*z0**2 - Rb**4 + 4*Rb**3*Re - 4*Rb**3*y0 - 6*Rb**2*Re**2 + 12*Rb**2*Re*y0 - 2*Rb**2*x0**2 - 6*Rb**2*y0**2 - 2*Rb**2*z0**2 + 4*Rb*Re**3 - 12*Rb*Re**2*y0 + 4*Rb*Re*x0**2 + 12*Rb*Re*y0**2 + 4*Rb*Re*z0**2 - 4*Rb*x0**2*y0 - 4*Rb*y0**3 - 4*Rb*y0*z0**2 - Re**4 + 4*Re**3*y0 - 2*Re**2*x0**2 - 6*Re**2*y0**2 - 2*Re**2*z0**2 + 4*Re*x0**2*y0 + 4*Re*y0**3 + 4*Re*y0*z0**2 - x0**4 - 2*x0**2*y0**2 - 2*x0**2*z0**2 - y0**4 - 2*y0**2*z0**2 - z0**4)**(1/2) - Re*(- Lb**4 + 2*Lb**2*Le**2 + 2*Lb**2*Rb**2 - 4*Lb**2*Rb*Re + 4*Lb**2*Rb*y0 + 2*Lb**2*Re**2 - 4*Lb**2*Re*y0 - 2*Lb**2*x0**2 + 2*Lb**2*y0**2 + 2*Lb**2*z0**2 - Le**4 + 2*Le**2*Rb**2 - 4*Le**2*Rb*Re + 4*Le**2*Rb*y0 + 2*Le**2*Re**2 - 4*Le**2*Re*y0 + 2*Le**2*x0**2 + 2*Le**2*y0**2 + 2*Le**2*z0**2 - Rb**4 + 4*Rb**3*Re - 4*Rb**3*y0 - 6*Rb**2*Re**2 + 12*Rb**2*Re*y0 - 2*Rb**2*x0**2 - 6*Rb**2*y0**2 - 2*Rb**2*z0**2 + 4*Rb*Re**3 - 12*Rb*Re**2*y0 + 4*Rb*Re*x0**2 + 12*Rb*Re*y0**2 + 4*Rb*Re*z0**2 - 4*Rb*x0**2*y0 - 4*Rb*y0**3 - 4*Rb*y0*z0**2 - Re**4 + 4*Re**3*y0 - 2*Re**2*x0**2 - 6*Re**2*y0**2 - 2*Re**2*z0**2 + 4*Re*x0**2*y0 + 4*Re*y0**3 + 4*Re*y0*z0**2 - x0**4 - 2*x0**2*y0**2 - 2*x0**2*z0**2 - y0**4 - 2*y0**2*z0**2 - z0**4)**(1/2) + z0**3 + y0*(- Lb**4 + 2*Lb**2*Le**2 + 2*Lb**2*Rb**2 - 4*Lb**2*Rb*Re + 4*Lb**2*Rb*y0 + 2*Lb**2*Re**2 - 4*Lb**2*Re*y0 - 2*Lb**2*x0**2 + 2*Lb**2*y0**2 + 2*Lb**2*z0**2 - Le**4 + 2*Le**2*Rb**2 - 4*Le**2*Rb*Re + 4*Le**2*Rb*y0 + 2*Le**2*Re**2 - 4*Le**2*Re*y0 + 2*Le**2*x0**2 + 2*Le**2*y0**2 + 2*Le**2*z0**2 - Rb**4 + 4*Rb**3*Re - 4*Rb**3*y0 - 6*Rb**2*Re**2 + 12*Rb**2*Re*y0 - 2*Rb**2*x0**2 - 6*Rb**2*y0**2 - 2*Rb**2*z0**2 + 4*Rb*Re**3 - 12*Rb*Re**2*y0 + 4*Rb*Re*x0**2 + 12*Rb*Re*y0**2 + 4*Rb*Re*z0**2 - 4*Rb*x0**2*y0 - 4*Rb*y0**3 - 4*Rb*y0*z0**2 - Re**4 + 4*Re**3*y0 - 2*Re**2*x0**2 - 6*Re**2*y0**2 - 2*Re**2*z0**2 + 4*Re*x0**2*y0 + 4*Re*y0**3 + 4*Re*y0*z0**2 - x0**4 - 2*x0**2*y0**2 - 2*x0**2*z0**2 - y0**4 - 2*y0**2*z0**2 - z0**4)**(1/2) - 2*Rb*Re*z0 + 2*Rb*y0*z0 - 2*Re*y0*z0))/(2*(Rb - Re + y0)*(Rb**2 - 2*Rb*Re + 2*Rb*y0 + Re**2 - 2*Re*y0 + y0**2 + z0**2)))
    Jy.append((Lb**2 - Le**2 - Rb**2 + Re**2 - 2*Re*y0 + x0**2 + y0**2 + z0**2)/(2*(Rb - Re + y0)) - (z0*(Lb**2*z0 - Le**2*z0 + Rb**2*z0 + Re**2*z0 + x0**2*z0 + y0**2*z0 - Rb*(- Lb**4 + 2*Lb**2*Le**2 + 2*Lb**2*Rb**2 - 4*Lb**2*Rb*Re + 4*Lb**2*Rb*y0 + 2*Lb**2*Re**2 - 4*Lb**2*Re*y0 - 2*Lb**2*x0**2 + 2*Lb**2*y0**2 + 2*Lb**2*z0**2 - Le**4 + 2*Le**2*Rb**2 - 4*Le**2*Rb*Re + 4*Le**2*Rb*y0 + 2*Le**2*Re**2 - 4*Le**2*Re*y0 + 2*Le**2*x0**2 + 2*Le**2*y0**2 + 2*Le**2*z0**2 - Rb**4 + 4*Rb**3*Re - 4*Rb**3*y0 - 6*Rb**2*Re**2 + 12*Rb**2*Re*y0 - 2*Rb**2*x0**2 - 6*Rb**2*y0**2 - 2*Rb**2*z0**2 + 4*Rb*Re**3 - 12*Rb*Re**2*y0 + 4*Rb*Re*x0**2 + 12*Rb*Re*y0**2 + 4*Rb*Re*z0**2 - 4*Rb*x0**2*y0 - 4*Rb*y0**3 - 4*Rb*y0*z0**2 - Re**4 + 4*Re**3*y0 - 2*Re**2*x0**2 - 6*Re**2*y0**2 - 2*Re**2*z0**2 + 4*Re*x0**2*y0 + 4*Re*y0**3 + 4*Re*y0*z0**2 - x0**4 - 2*x0**2*y0**2 - 2*x0**2*z0**2 - y0**4 - 2*y0**2*z0**2 - z0**4)**(1/2) + Re*(- Lb**4 + 2*Lb**2*Le**2 + 2*Lb**2*Rb**2 - 4*Lb**2*Rb*Re + 4*Lb**2*Rb*y0 + 2*Lb**2*Re**2 - 4*Lb**2*Re*y0 - 2*Lb**2*x0**2 + 2*Lb**2*y0**2 + 2*Lb**2*z0**2 - Le**4 + 2*Le**2*Rb**2 - 4*Le**2*Rb*Re + 4*Le**2*Rb*y0 + 2*Le**2*Re**2 - 4*Le**2*Re*y0 + 2*Le**2*x0**2 + 2*Le**2*y0**2 + 2*Le**2*z0**2 - Rb**4 + 4*Rb**3*Re - 4*Rb**3*y0 - 6*Rb**2*Re**2 + 12*Rb**2*Re*y0 - 2*Rb**2*x0**2 - 6*Rb**2*y0**2 - 2*Rb**2*z0**2 + 4*Rb*Re**3 - 12*Rb*Re**2*y0 + 4*Rb*Re*x0**2 + 12*Rb*Re*y0**2 + 4*Rb*Re*z0**2 - 4*Rb*x0**2*y0 - 4*Rb*y0**3 - 4*Rb*y0*z0**2 - Re**4 + 4*Re**3*y0 - 2*Re**2*x0**2 - 6*Re**2*y0**2 - 2*Re**2*z0**2 + 4*Re*x0**2*y0 + 4*Re*y0**3 + 4*Re*y0*z0**2 - x0**4 - 2*x0**2*y0**2 - 2*x0**2*z0**2 - y0**4 - 2*y0**2*z0**2 - z0**4)**(1/2) + z0**3 - y0*(- Lb**4 + 2*Lb**2*Le**2 + 2*Lb**2*Rb**2 - 4*Lb**2*Rb*Re + 4*Lb**2*Rb*y0 + 2*Lb**2*Re**2 - 4*Lb**2*Re*y0 - 2*Lb**2*x0**2 + 2*Lb**2*y0**2 + 2*Lb**2*z0**2 - Le**4 + 2*Le**2*Rb**2 - 4*Le**2*Rb*Re + 4*Le**2*Rb*y0 + 2*Le**2*Re**2 - 4*Le**2*Re*y0 + 2*Le**2*x0**2 + 2*Le**2*y0**2 + 2*Le**2*z0**2 - Rb**4 + 4*Rb**3*Re - 4*Rb**3*y0 - 6*Rb**2*Re**2 + 12*Rb**2*Re*y0 - 2*Rb**2*x0**2 - 6*Rb**2*y0**2 - 2*Rb**2*z0**2 + 4*Rb*Re**3 - 12*Rb*Re**2*y0 + 4*Rb*Re*x0**2 + 12*Rb*Re*y0**2 + 4*Rb*Re*z0**2 - 4*Rb*x0**2*y0 - 4*Rb*y0**3 - 4*Rb*y0*z0**2 - Re**4 + 4*Re**3*y0 - 2*Re**2*x0**2 - 6*Re**2*y0**2 - 2*Re**2*z0**2 + 4*Re*x0**2*y0 + 4*Re*y0**3 + 4*Re*y0*z0**2 - x0**4 - 2*x0**2*y0**2 - 2*x0**2*z0**2 - y0**4 - 2*y0**2*z0**2 - z0**4)**(1/2) - 2*Rb*Re*z0 + 2*Rb*y0*z0 - 2*Re*y0*z0))/(2*(Rb - Re + y0)*(Rb**2 - 2*Rb*Re + 2*Rb*y0 + Re**2 - 2*Re*y0 + y0**2 + z0**2)))
    Jz.append((Lb**2*z0 - Le**2*z0 + Rb**2*z0 + Re**2*z0 + x0**2*z0 + y0**2*z0 + Rb*(- Lb**4 + 2*Lb**2*Le**2 + 2*Lb**2*Rb**2 - 4*Lb**2*Rb*Re + 4*Lb**2*Rb*y0 + 2*Lb**2*Re**2 - 4*Lb**2*Re*y0 - 2*Lb**2*x0**2 + 2*Lb**2*y0**2 + 2*Lb**2*z0**2 - Le**4 + 2*Le**2*Rb**2 - 4*Le**2*Rb*Re + 4*Le**2*Rb*y0 + 2*Le**2*Re**2 - 4*Le**2*Re*y0 + 2*Le**2*x0**2 + 2*Le**2*y0**2 + 2*Le**2*z0**2 - Rb**4 + 4*Rb**3*Re - 4*Rb**3*y0 - 6*Rb**2*Re**2 + 12*Rb**2*Re*y0 - 2*Rb**2*x0**2 - 6*Rb**2*y0**2 - 2*Rb**2*z0**2 + 4*Rb*Re**3 - 12*Rb*Re**2*y0 + 4*Rb*Re*x0**2 + 12*Rb*Re*y0**2 + 4*Rb*Re*z0**2 - 4*Rb*x0**2*y0 - 4*Rb*y0**3 - 4*Rb*y0*z0**2 - Re**4 + 4*Re**3*y0 - 2*Re**2*x0**2 - 6*Re**2*y0**2 - 2*Re**2*z0**2 + 4*Re*x0**2*y0 + 4*Re*y0**3 + 4*Re*y0*z0**2 - x0**4 - 2*x0**2*y0**2 - 2*x0**2*z0**2 - y0**4 - 2*y0**2*z0**2 - z0**4)**(1/2) - Re*(- Lb**4 + 2*Lb**2*Le**2 + 2*Lb**2*Rb**2 - 4*Lb**2*Rb*Re + 4*Lb**2*Rb*y0 + 2*Lb**2*Re**2 - 4*Lb**2*Re*y0 - 2*Lb**2*x0**2 + 2*Lb**2*y0**2 + 2*Lb**2*z0**2 - Le**4 + 2*Le**2*Rb**2 - 4*Le**2*Rb*Re + 4*Le**2*Rb*y0 + 2*Le**2*Re**2 - 4*Le**2*Re*y0 + 2*Le**2*x0**2 + 2*Le**2*y0**2 + 2*Le**2*z0**2 - Rb**4 + 4*Rb**3*Re - 4*Rb**3*y0 - 6*Rb**2*Re**2 + 12*Rb**2*Re*y0 - 2*Rb**2*x0**2 - 6*Rb**2*y0**2 - 2*Rb**2*z0**2 + 4*Rb*Re**3 - 12*Rb*Re**2*y0 + 4*Rb*Re*x0**2 + 12*Rb*Re*y0**2 + 4*Rb*Re*z0**2 - 4*Rb*x0**2*y0 - 4*Rb*y0**3 - 4*Rb*y0*z0**2 - Re**4 + 4*Re**3*y0 - 2*Re**2*x0**2 - 6*Re**2*y0**2 - 2*Re**2*z0**2 + 4*Re*x0**2*y0 + 4*Re*y0**3 + 4*Re*y0*z0**2 - x0**4 - 2*x0**2*y0**2 - 2*x0**2*z0**2 - y0**4 - 2*y0**2*z0**2 - z0**4)**(1/2) + z0**3 + y0*(- Lb**4 + 2*Lb**2*Le**2 + 2*Lb**2*Rb**2 - 4*Lb**2*Rb*Re + 4*Lb**2*Rb*y0 + 2*Lb**2*Re**2 - 4*Lb**2*Re*y0 - 2*Lb**2*x0**2 + 2*Lb**2*y0**2 + 2*Lb**2*z0**2 - Le**4 + 2*Le**2*Rb**2 - 4*Le**2*Rb*Re + 4*Le**2*Rb*y0 + 2*Le**2*Re**2 - 4*Le**2*Re*y0 + 2*Le**2*x0**2 + 2*Le**2*y0**2 + 2*Le**2*z0**2 - Rb**4 + 4*Rb**3*Re - 4*Rb**3*y0 - 6*Rb**2*Re**2 + 12*Rb**2*Re*y0 - 2*Rb**2*x0**2 - 6*Rb**2*y0**2 - 2*Rb**2*z0**2 + 4*Rb*Re**3 - 12*Rb*Re**2*y0 + 4*Rb*Re*x0**2 + 12*Rb*Re*y0**2 + 4*Rb*Re*z0**2 - 4*Rb*x0**2*y0 - 4*Rb*y0**3 - 4*Rb*y0*z0**2 - Re**4 + 4*Re**3*y0 - 2*Re**2*x0**2 - 6*Re**2*y0**2 - 2*Re**2*z0**2 + 4*Re*x0**2*y0 + 4*Re*y0**3 + 4*Re*y0*z0**2 - x0**4 - 2*x0**2*y0**2 - 2*x0**2*z0**2 - y0**4 - 2*y0**2*z0**2 - z0**4)**(1/2) - 2*Rb*Re*z0 + 2*Rb*y0*z0 - 2*Re*y0*z0)/(2*(Rb**2 - 2*Rb*Re + 2*Rb*y0 + Re**2 - 2*Re*y0 + y0**2 + z0**2)))
    Jz.append((Lb**2*z0 - Le**2*z0 + Rb**2*z0 + Re**2*z0 + x0**2*z0 + y0**2*z0 - Rb*(- Lb**4 + 2*Lb**2*Le**2 + 2*Lb**2*Rb**2 - 4*Lb**2*Rb*Re + 4*Lb**2*Rb*y0 + 2*Lb**2*Re**2 - 4*Lb**2*Re*y0 - 2*Lb**2*x0**2 + 2*Lb**2*y0**2 + 2*Lb**2*z0**2 - Le**4 + 2*Le**2*Rb**2 - 4*Le**2*Rb*Re + 4*Le**2*Rb*y0 + 2*Le**2*Re**2 - 4*Le**2*Re*y0 + 2*Le**2*x0**2 + 2*Le**2*y0**2 + 2*Le**2*z0**2 - Rb**4 + 4*Rb**3*Re - 4*Rb**3*y0 - 6*Rb**2*Re**2 + 12*Rb**2*Re*y0 - 2*Rb**2*x0**2 - 6*Rb**2*y0**2 - 2*Rb**2*z0**2 + 4*Rb*Re**3 - 12*Rb*Re**2*y0 + 4*Rb*Re*x0**2 + 12*Rb*Re*y0**2 + 4*Rb*Re*z0**2 - 4*Rb*x0**2*y0 - 4*Rb*y0**3 - 4*Rb*y0*z0**2 - Re**4 + 4*Re**3*y0 - 2*Re**2*x0**2 - 6*Re**2*y0**2 - 2*Re**2*z0**2 + 4*Re*x0**2*y0 + 4*Re*y0**3 + 4*Re*y0*z0**2 - x0**4 - 2*x0**2*y0**2 - 2*x0**2*z0**2 - y0**4 - 2*y0**2*z0**2 - z0**4)**(1/2) + Re*(- Lb**4 + 2*Lb**2*Le**2 + 2*Lb**2*Rb**2 - 4*Lb**2*Rb*Re + 4*Lb**2*Rb*y0 + 2*Lb**2*Re**2 - 4*Lb**2*Re*y0 - 2*Lb**2*x0**2 + 2*Lb**2*y0**2 + 2*Lb**2*z0**2 - Le**4 + 2*Le**2*Rb**2 - 4*Le**2*Rb*Re + 4*Le**2*Rb*y0 + 2*Le**2*Re**2 - 4*Le**2*Re*y0 + 2*Le**2*x0**2 + 2*Le**2*y0**2 + 2*Le**2*z0**2 - Rb**4 + 4*Rb**3*Re - 4*Rb**3*y0 - 6*Rb**2*Re**2 + 12*Rb**2*Re*y0 - 2*Rb**2*x0**2 - 6*Rb**2*y0**2 - 2*Rb**2*z0**2 + 4*Rb*Re**3 - 12*Rb*Re**2*y0 + 4*Rb*Re*x0**2 + 12*Rb*Re*y0**2 + 4*Rb*Re*z0**2 - 4*Rb*x0**2*y0 - 4*Rb*y0**3 - 4*Rb*y0*z0**2 - Re**4 + 4*Re**3*y0 - 2*Re**2*x0**2 - 6*Re**2*y0**2 - 2*Re**2*z0**2 + 4*Re*x0**2*y0 + 4*Re*y0**3 + 4*Re*y0*z0**2 - x0**4 - 2*x0**2*y0**2 - 2*x0**2*z0**2 - y0**4 - 2*y0**2*z0**2 - z0**4)**(1/2) + z0**3 - y0*(- Lb**4 + 2*Lb**2*Le**2 + 2*Lb**2*Rb**2 - 4*Lb**2*Rb*Re + 4*Lb**2*Rb*y0 + 2*Lb**2*Re**2 - 4*Lb**2*Re*y0 - 2*Lb**2*x0**2 + 2*Lb**2*y0**2 + 2*Lb**2*z0**2 - Le**4 + 2*Le**2*Rb**2 - 4*Le**2*Rb*Re + 4*Le**2*Rb*y0 + 2*Le**2*Re**2 - 4*Le**2*Re*y0 + 2*Le**2*x0**2 + 2*Le**2*y0**2 + 2*Le**2*z0**2 - Rb**4 + 4*Rb**3*Re - 4*Rb**3*y0 - 6*Rb**2*Re**2 + 12*Rb**2*Re*y0 - 2*Rb**2*x0**2 - 6*Rb**2*y0**2 - 2*Rb**2*z0**2 + 4*Rb*Re**3 - 12*Rb*Re**2*y0 + 4*Rb*Re*x0**2 + 12*Rb*Re*y0**2 + 4*Rb*Re*z0**2 - 4*Rb*x0**2*y0 - 4*Rb*y0**3 - 4*Rb*y0*z0**2 - Re**4 + 4*Re**3*y0 - 2*Re**2*x0**2 - 6*Re**2*y0**2 - 2*Re**2*z0**2 + 4*Re*x0**2*y0 + 4*Re*y0**3 + 4*Re*y0*z0**2 - x0**4 - 2*x0**2*y0**2 - 2*x0**2*z0**2 - y0**4 - 2*y0**2*z0**2 - z0**4)**(1/2) - 2*Rb*Re*z0 + 2*Rb*y0*z0 - 2*Re*y0*z0)/(2*(Rb**2 - 2*Rb*Re + 2*Rb*y0 + Re**2 - 2*Re*y0 + y0**2 + z0**2)))
    # Based on the way the base coordinate system is set, it is impossible for Jy to be positive. 
    try:  
        for i in range(len(Jy)):
            if Jy[i] < 0:
                theta = math.atan(-Jz[i] / (-Rb - Jy[i])) * 180 / math.pi
                # print(theta)
                return theta
        return False
    except:
        return False

def inverse_kinematics(x0, y0, z0):
    theta_A = calculate_angle_yz(x0, y0, z0)
    if theta_A != False:
        theta_B = calculate_angle_yz(x0*cos120 + y0*sin120, y0*cos120 - x0*sin120, z0)
        if theta_B != False:
            theta_C = calculate_angle_yz(x0*cos120 - y0*sin120, y0*cos120+x0*sin120, z0)
            return theta_A, theta_B, theta_C if theta_C != False else theta_C

while 1:
    coordinates = input("input desired coordinates: ")
    x0, y0, z0 = coordinates.split()
    print(inverse_kinematics(float(x0), float(y0), float(z0)))
    time.sleep(0.01)
